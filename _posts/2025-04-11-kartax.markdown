---
layout: post
title: karta/vax変換ページを製作
date: 2025-04-11 23:00:00
description:  # Add post description (optional)
img: postimg/250411_main.png # Add image post (optional)
fig-caption: # Add figcaption (optional)
tags: [java]
---

サーブレットファイルの編集場所を変える度にjavaxとjakartaを入れ替えるのが面倒だったので、<br>
[使えるかどうか分からないもの](https://liqrase.net/kartax/kartax)を作りました。

### 作った後に「Ctrl+F → 全体検索 → 一括変換」でいいじゃん！　と気づきました。
### 掛けた労力無駄！！

サーブレットの方は自分で分かるように細かくコメントを入れたので、毎度の通り貼ります。
```java
package controller;

// 行単位で効率よく読み込むためのクラス
import java.io.StringReader;
import java.io.BufferedReader;
// 入出力操作中に発生するエラーを扱う例外クラス
import java.io.IOException;
// 下2つは辞書を使うためのクラス
import java.util.HashMap;
import java.util.Map;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/kartax")
public class KartaxController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	//変換用の辞書を生成
	private static final Map<String, String> HENKAN_MAP = new HashMap<>();
	
	// 初期化ブロック 定数的なデータ構造の準備に向いた処理
	static {
    	// jakarta → javax の対象を詰め込む
		HENKAN_MAP.put("import jakarta.servlet.RequestDispatcher;", "import javax.servlet.RequestDispatcher;");
		HENKAN_MAP.put("import jakarta.servlet.ServletException;", "import javax.servlet.ServletException;");
		HENKAN_MAP.put("import jakarta.servlet.annotation.WebServlet;", "import javax.servlet.annotation.WebServlet;");
		HENKAN_MAP.put("import jakarta.servlet.http.HttpServlet;", "import javax.servlet.http.HttpServlet;");
		HENKAN_MAP.put("import jakarta.servlet.http.HttpServletRequest;", "import javax.servlet.http.HttpServletRequest;");
		HENKAN_MAP.put("import jakarta.servlet.http.HttpServletResponse;", "import javax.servlet.http.HttpServletResponse;");
 
		// reverseMapを生成し、javax → jakarta となる逆方向の辞書を作成
    Map<String, String> reverseMap = new HashMap<>();
    // HENKAN_MAP.entrySet()でHENKAN_MAPの内容をすべて取得し、for内のみで仕えるMapであるentryに入れる
    for (Map.Entry<String, String> entry : HENKAN_MAP.entrySet()) {
    		// entryに入った内容をキーと値をひっくり返してreverseMapに入れる
        reverseMap.put(entry.getValue(), entry.getKey()); // 逆順に登録
    }
    
   // javax→jakarta方向の辞書の内容をjakarta→javax方向が入っている辞書に追加
    HENKAN_MAP.putAll(reverseMap);
	}
	
	
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {
		RequestDispatcher rd = request.getRequestDispatcher("/jsp/main.jsp");
		rd.forward(request, response);
	}
	
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 入力された値を受け取る
		// クラス BufferedReader は、1行ずつ高速に文字データを読み取ることに特化したクラス
		String input = request.getParameter("txt");
		BufferedReader inputed = new BufferedReader(new StringReader(input));
		
		// 元のページに返すためのリスト
		StringBuilder output = new StringBuilder();
		
		//受け取った文字列を一時的に保存するための変数
		String line;
		
		// BufferedReader.readLine(); は1行ずつ読み込むメソッド。読み込む行が無くなるとnullを返す。
		while ((line = inputed.readLine()) != null) {
			// lineに入ったものから余分な空白を除去してline2に代入する
			String line2 = line.trim();
			// map.containsKey(調べたいキー); でMapの中に指定したキーが存在するかを調べる。
			//ここでは、HENKAN_MAPのキーの中にline2に入っている文と一致するものがあるかを調べている。
			if (HENKAN_MAP.containsKey(line2)) {
				// 一致するものがあれば、「HENKAN_MAPの該当キーの値に改行文字を加えたもの」をline2に代入
				output.append(HENKAN_MAP.get(line2)).append("\n");
			}
		}

    // 結果をリクエストスコープにセット
    request.setAttribute("result", output.toString());
    
		RequestDispatcher rd = request.getRequestDispatcher("/jsp/main.jsp");
		rd.forward(request, response);
	}

}
```

JSPのコメントは…まあ入れんでええでしょう。<br>
今までとの違いは、inputの代わりにtextareaを使い、<br>
コピーボタンを枠内右上に置くために、onclick="copyToClipboard()
> ボタンを押したらJavascriptの関数copyToClipboard()を呼び出してね。

を入れているところです。

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>karta⇔vax</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" type="text/css" href="/kartax/css/kartax.css"/>
</head>
<body>
<header>
    <div class="header-container">
        <a href="https://www.liqrase.net/" class="title">Welcome to My Cafe</a>
    </div>
</header>
<main>
	<h2>karta ⇔ vax</h2>
	<h4>対象コード</h4>
	<p class="left-align">
		import ○○.servlet.RequestDispatcher;<br>
		import ○○.servlet.ServletException;<br>
		import ○○.servlet.annotation.WebServlet;<br>
		import ○○.servlet.http.HttpServlet;<br>
		import ○○.servlet.http.HttpServletRequest;<br>
		import ○○.servlet.http.HttpServletResponse;
	</p>
	<form action="/kartax/kartax" method="post">
	<div class="display">
		<textarea name="txt" class="txt" placeholder="ここにコードを貼り付けてください"></textarea>
		<button class="conv-btn" type="submit">変換</button>
	</div>
	</form>
	<div class="result-wrapper">
  	<textarea readonly class="result" id="resultArea">${result}</textarea>
  	<button class="copy-btn" id="copyBtn" onclick="copyToClipboard()">Copy</button>
	</div>
	<a href="https://liqrase.net/appra.html">戻る</a>
	<script src="/kartax/js/kartax.js"></script>
<footer>
    <p>© 2025 Ligrase</p>
</footer>
</body>
</html>
```

以上です。
